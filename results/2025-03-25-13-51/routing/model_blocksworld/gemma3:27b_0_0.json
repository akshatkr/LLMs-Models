{
    "move_to_node": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\nNo predicate has been defined yet",
        "action_desc": "The robot moves to the specified node in the network, provided there is an edge connecting the current node to the target node. The robot can only move along edges that are part of the network. The robot must be at a valid node to begin moving.",
        "iter_1": {
            "llm_output": "```\n1. ?from_node - node: the node the robot is currently at\n2. ?to_node - node: the node the robot is moving to\n\nPreconditions:\n```\n(and\n   (robot-at ?from_node)\n   (edge-exists ?from_node ?to_node)\n   (node-unvisited ?to_node)\n)\n```\n\nEffects:\n```\n(and\n   (not (robot-at ?from_node))\n   (not (node-unvisited ?to_node))\n   (robot-at ?to_node)\n)\n```\n\nNew Predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x and node ?y\n3. (node-unvisited ?x - node): true if node ?x has not been visited yet\n```"
        },
        "llm_output": "```\n1. ?from_node - node: the node the robot is currently at\n2. ?to_node - node: the node the robot is moving to\n\nPreconditions:\n```\n(and\n   (robot-at ?from_node)\n   (edge-exists ?from_node ?to_node)\n   (node-unvisited ?to_node)\n)\n```\n\nEffects:\n```\n(and\n   (not (robot-at ?from_node))\n   (not (node-unvisited ?to_node))\n   (robot-at ?to_node)\n)\n```\n\nNew Predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x and node ?y\n3. (node-unvisited ?x - node): true if node ?x has not been visited yet\n```",
        "new_predicates": [
            "(robot-at ?x - node): true if the robot is currently at node ?x",
            "(edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x and node ?y",
            "(node-unvisited ?x - node): true if node ?x has not been visited yet"
        ]
    },
    "visit_node": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x and node ?y\n3. (node-unvisited ?x - node): true if node ?x has not been visited yet",
        "action_desc": "The robot visits the node, marking it as visited in the route. The robot can only visit each node once. This action cannot be performed if the node has already been visited. Visiting a node is necessary to complete the route.",
        "iter_1": {
            "llm_output": "1. ?x - node: the node to visit\n\nPreconditions:\n```\n(and\n   (robot-at ?x)\n   (node-unvisited ?x)\n)\n```\n\nEffects:\n```\n(and\n   (not (node-unvisited ?x))\n   (node-visited ?x)\n)\n```\n\nNew Predicates:\n1. (node-visited ?x - node): true if node ?x has been visited.\n"
        },
        "llm_output": "1. ?x - node: the node to visit\n\nPreconditions:\n```\n(and\n   (robot-at ?x)\n   (node-unvisited ?x)\n)\n```\n\nEffects:\n```\n(and\n   (not (node-unvisited ?x))\n   (node-visited ?x)\n)\n```\n\nNew Predicates:\n1. (node-visited ?x - node): true if node ?x has been visited.\n",
        "new_predicates": [
            "(node-visited ?x - node): true if node ?x has been visited."
        ]
    },
    "end_route": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x and node ?y\n3. (node-unvisited ?x - node): true if node ?x has not been visited yet\n4. (node-visited ?x - node): true if node ?x has been visited.",
        "action_desc": "The robot completes its route by reaching the last node in the path. Precondition is that all nodes have been visited exactly once. I also want to make sure that robot visits node n1 before node n2. The robot must have visited all nodes before performing this action. This action signifies the completion of the route.",
        "iter_1": {
            "llm_output": "```\n?x - node: the last node in the route\n\nPreconditions:\n```\n(and\n   (forall (?n - node) (node-visited ?n))\n   (robot-at ?x)\n   (node-visited ?x)\n   (node-n1-visited-before-n2)\n)\n```\n\nEffects:\n```\n(and\n   (route-completed)\n)\n```\n\nNew Predicates:\n1. (route-completed): true if the route is completed.\n2. (node-n1-visited-before-n2): true if node n1 is visited before node n2.\n"
        },
        "llm_output": "```\n?x - node: the last node in the route\n\nPreconditions:\n```\n(and\n   (forall (?n - node) (node-visited ?n))\n   (robot-at ?x)\n   (node-visited ?x)\n   (node-n1-visited-before-n2)\n)\n```\n\nEffects:\n```\n(and\n   (route-completed)\n)\n```\n\nNew Predicates:\n1. (route-completed): true if the route is completed.\n2. (node-n1-visited-before-n2): true if node n1 is visited before node n2.\n",
        "new_predicates": [
            "(route-completed): true if the route is completed.",
            "(node-n1-visited-before-n2): true if node n1 is visited before node n2."
        ]
    }
}