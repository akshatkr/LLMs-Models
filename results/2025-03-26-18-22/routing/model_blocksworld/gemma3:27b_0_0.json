{
    "move_to_node": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\nNo predicate has been defined yet",
        "action_desc": "The robot moves to the specified node in the network, provided there is an edge connecting the current node to the target node. Once the robot moves  The robot can only move along edges that are part of the network. The robot must be at a valid node to begin moving.",
        "iter_1": {
            "llm_output": "Okay, here's the PDDL definition for the robot's movement action, based on your domain description. I'll define the preconditions and effects, along with the new predicates used.\n\nParameters:\n1. ?from_node - node: the node the robot is currently at.\n2. ?to_node - node: the node the robot wants to move to.\n\nPreconditions:\n```\n(and\n   (robot-at ?from_node)\n   (edge-exists ?from_node ?to_node)\n   (node-unvisited ?to_node)\n)\n```\n\nEffects:\n```\n(and\n   (not (robot-at ?from_node))\n   (not (node-unvisited ?to_node))\n   (robot-at ?to_node)\n   (node-visited ?to_node)\n)\n```\n\nNew Predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x.\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x to node ?y.\n3. (node-unvisited ?x - node): true if node ?x has not been visited by the robot yet.\n4. (node-visited ?x - node): true if node ?x has been visited by the robot.\n"
        },
        "llm_output": "Okay, here's the PDDL definition for the robot's movement action, based on your domain description. I'll define the preconditions and effects, along with the new predicates used.\n\nParameters:\n1. ?from_node - node: the node the robot is currently at.\n2. ?to_node - node: the node the robot wants to move to.\n\nPreconditions:\n```\n(and\n   (robot-at ?from_node)\n   (edge-exists ?from_node ?to_node)\n   (node-unvisited ?to_node)\n)\n```\n\nEffects:\n```\n(and\n   (not (robot-at ?from_node))\n   (not (node-unvisited ?to_node))\n   (robot-at ?to_node)\n   (node-visited ?to_node)\n)\n```\n\nNew Predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x.\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x to node ?y.\n3. (node-unvisited ?x - node): true if node ?x has not been visited by the robot yet.\n4. (node-visited ?x - node): true if node ?x has been visited by the robot.\n",
        "new_predicates": [
            "(robot-at ?x - node): true if the robot is currently at node ?x.",
            "(edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x to node ?y.",
            "(node-unvisited ?x - node): true if node ?x has not been visited by the robot yet.",
            "(node-visited ?x - node): true if node ?x has been visited by the robot."
        ]
    },
    "visit_node": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x.\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x to node ?y.\n3. (node-unvisited ?x - node): true if node ?x has not been visited by the robot yet.\n4. (node-visited ?x - node): true if node ?x has been visited by the robot.",
        "action_desc": "The robot visits the node, marking it as visited in the route. The robot can only visit each node once. This action cannot be performed if the node has already been visited. Visiting a node is necessary to complete the route.",
        "iter_1": {
            "llm_output": "1. ?x - node: the node to visit\n\nPreconditions:\n```\n(and\n   (robot-at ?x)\n   (node-unvisited ?x)\n)\n```\n\nEffects:\n```\n(and\n   (not (node-unvisited ?x))\n   (node-visited ?x)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?x - node: the node to visit\n\nPreconditions:\n```\n(and\n   (robot-at ?x)\n   (node-unvisited ?x)\n)\n```\n\nEffects:\n```\n(and\n   (not (node-unvisited ?x))\n   (node-visited ?x)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "end_route": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (robot-at ?x - node): true if the robot is currently at node ?x.\n2. (edge-exists ?x - node ?y - node): true if there is an edge connecting node ?x to node ?y.\n3. (node-unvisited ?x - node): true if node ?x has not been visited by the robot yet.\n4. (node-visited ?x - node): true if node ?x has been visited by the robot.",
        "action_desc": "The robot completes its route by reaching the last node in the path. Executing this action makes a flag allVisited as true. The flag allVisited must be false in the begining The robot must have visited all nodes before performing this action. This action signifies the completion of the route.",
        "iter_1": {
            "llm_output": "1. ?x - node: the node where the robot completes the route.\n\nPreconditions:\n```\n(and\n   (not (all-nodes-visited))\n   (robot-at ?x)\n)\n```\n\nEffects:\n```\n(and\n   (all-nodes-visited)\n)\n```\n\nNew Predicates:\n1. (all-nodes-visited): True if all nodes have been visited by the robot.\n"
        },
        "llm_output": "1. ?x - node: the node where the robot completes the route.\n\nPreconditions:\n```\n(and\n   (not (all-nodes-visited))\n   (robot-at ?x)\n)\n```\n\nEffects:\n```\n(and\n   (all-nodes-visited)\n)\n```\n\nNew Predicates:\n1. (all-nodes-visited): True if all nodes have been visited by the robot.\n",
        "new_predicates": [
            "(all-nodes-visited): True if all nodes have been visited by the robot."
        ]
    }
}